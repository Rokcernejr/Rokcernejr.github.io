import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt
import yfinance as yf
import xgboost as xgb
from scipy.stats import norm
from scipy.optimize import minimize
from sklearn.model_selection import train_test_split
import optuna

# 2. Data Collection from yfinance
def download_data(ticker, start_date, end_date):
    data = yf.download(ticker, start=start_date, end=end_date)
    data['Return'] = data['Adj Close'].pct_change().fillna(0)
    return data

ticker = 'AAPL'
start_date = '2018-01-01'
end_date = '2023-01-01'
data = download_data(ticker, start_date, end_date)

# 3. Create Features and Labels
def create_features_labels(data, seq_length=50):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data['Return'].values[i:i+seq_length])
        y.append(1 if data['Return'].values[i+seq_length] > 0 else 0)
    X, y = np.array(X), np.array(y)
    X = X.reshape(X.shape[0], X.shape[1], 1)  # Add channel dimension
    return X, y

X, y = create_features_labels(data)
X = torch.tensor(X, dtype=torch.float32)
y = torch.tensor(y, dtype=torch.float32).unsqueeze(1)

# 4. Define the 1D Convolutional Neural Network
class Conv1DNN(nn.Module):
    def __init__(self, n_filters1, n_filters2, kernel_size1, kernel_size2, fc_units):
        super(Conv1DNN, self).__init__()
        self.conv1 = nn.Conv1d(1, n_filters1, kernel_size=kernel_size1, padding=kernel_size1//2)
        self.conv2 = nn.Conv1d(n_filters1, n_filters2, kernel_size=kernel_size2, padding=kernel_size2//2)
        self.pool = nn.MaxPool1d(2)
        self.fc1 = nn.Linear(n_filters2 * (50 // 4), fc_units)
        self.fc2 = nn.Linear(fc_units, 1)
        self.sigmoid = nn.Sigmoid()

    def forward(self, x):
        x = x.permute(0, 2, 1)  # Change shape to (batch, channels, seq_length)
        x = self.pool(torch.relu(self.conv1(x)))
        x = self.pool(torch.relu(self.conv2(x)))
        x = x.view(x.size(0), -1)  # Flatten
        x = torch.relu(self.fc1(x))
        x = self.sigmoid(self.fc2(x))
        return x

# 5. Define Training and Evaluation Functions
def train(model, dataloader, criterion, optimizer, epochs):
    model.train()
    for epoch in range(epochs):
        for inputs, labels in dataloader:
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

def evaluate_model(model, X, y):
    model.eval()
    with torch.no_grad():
        y_pred = model(X).numpy().flatten()
        y_true = y.numpy().flatten()
        fpr, tpr, _ = roc_curve(y_true, y_pred)
        roc_auc = auc(fpr, tpr)
    return roc_auc

# 6. Hyperparameter Optimization with Optuna
def objective(trial):
    n_filters1 = trial.suggest_int('n_filters1', 16, 64)
    n_filters2 = trial.suggest_int('n_filters2', 16, 64)
    kernel_size1 = trial.suggest_int('kernel_size1', 3, 7)
    kernel_size2 = trial.suggest_int('kernel_size2', 3, 7)
    fc_units = trial.suggest_int('fc_units', 32, 128)
    learning_rate = trial.suggest_float('learning_rate', 1e-4, 1e-2)
    epochs = trial.suggest_int('epochs', 10, 50)
    
    model = Conv1DNN(n_filters1, n_filters2, kernel_size1, kernel_size2, fc_units)
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)
    
    dataset = TensorDataset(X, y)
    dataloader = DataLoader(dataset, batch_size=32, shuffle=True)
    
    train(model, dataloader, criterion, optimizer, epochs)
    roc_auc = evaluate_model(model, X, y)
    return roc_auc

study = optuna.create_study(direction='maximize')
study.optimize(objective, n_trials=50)

print('Best hyperparameters:', study.best_params)

# 7. Train the Best Model
best_params = study.best_params
model = Conv1DNN(
    n_filters1=best_params['n_filters1'],
    n_filters2=best_params['n_filters2'],
    kernel_size1=best_params['kernel_size1'],
    kernel_size2=best_params['kernel_size2'],
    fc_units=best_params['fc_units']
)
criterion = nn.BCELoss()
optimizer = optim.Adam(model.parameters(), lr=best_params['learning_rate'])

dataset = TensorDataset(X, y)
dataloader = DataLoader(dataset, batch_size=32, shuffle=True)

train(model, dataloader, criterion, optimizer, epochs=best_params['epochs'])
roc_auc = evaluate_model(model, X, y)
print('ROC AUC of the best model:', roc_auc)

# 8. Boosting (Gradient Boosting) Integration
X_np = X.numpy().reshape(X.shape[0], -1)  # Flatten for XGBoost
y_np = y.numpy().flatten()
X_train, X_val, y_train, y_val = train_test_split(X_np, y_np, test_size=0.2, random_state=42)

xgb_model = xgb.XGBClassifier()
xgb_model.fit(X_train, y_train)

y_pred_val = xgb_model.predict_proba(X_val)[:, 1]
fpr, tpr, _ = roc_curve(y_val, y_pred_val)
roc_auc = auc(fpr, tpr)

plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (area = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic - XGBoost')
plt.legend(loc="lower right")
plt.show()

# 9. Maximum Likelihood Estimation (MLE)
data_mle = np.random.normal(loc=5, scale=2, size=1000)

def log_likelihood(params):
    mu, sigma = params
    return -np.sum(np.log(norm.pdf(data_mle, mu, sigma)))

params_init = [0, 1]
result = minimize(log_likelihood, params_init, method='L-BFGS-B', bounds=[(None, None), (0.01, None)])

mu_mle, sigma_mle = result.x
print(f'MLE for mu: {mu_mle:.2f}, sigma: {sigma_mle:.2f}')